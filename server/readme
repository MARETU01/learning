课程作业报告

引言:
本报告概述了开发过程、整体设计模式、实施细节以及在开发过程中遇到的挑战。构建的Web应用包含三个页面：首页（根页面），提供网站概览；关于页面，包含个人简介；测验页面，具备动态后端功能的问答应用。

启动应用需在终端执行以下命令：“cd server/” 和 “npm start”。服务器将在Codio的本地地址运行：“https://delphimonster-salturgent-3000.codio-box.uk/”。

注意： 由于Bootstrap官方CDN在我地理位置加载缓慢，我采用了国内CDN服务加速资源加载。如需更换CDN服务，仅需在HTML文件中将Bootstrap相关链接代码替换成新CDN地址即可无缝迁移，无需对项目结构或代码做重大调整。

项目概述
前端
所有页面采用模板提升用户友好度和简洁性，遵循响应式设计原则。顶部导航固定显示，底部有包含个人联系信息的页脚。背景使用图片填充，美化网站视觉效果。

导航栏允许用户在不同页面间切换，右侧设有播放图标和搜索框。播放图标控制背景音乐播放/暂停，搜索框预留未来功能扩展。
首页
首页采用双列布局，配图丰富内容，并添加链接帮助用户跳转。

关于页面
展示个人详情、爱好及作品。右侧自动切换照片墙由“/static/my.js”实现，展示区含音频播放标签。

测验页面
测验页面较为复杂，包含10道题目，答题时有计时器记录时间。完成后显示成绩、用时，并可提交查看排行榜。答题逻辑和答案存储通过JavaScript实现。

排行榜页面
简单的页面结构，用于动态展示通过socket.IO实时更新的排行榜。

CSS
利用Bootstrap框架实现响应式设计，并参考了专业网站模板（https://wowthemesnet.github.io/template-mundana-bootstrap-html/index.html）。自定义CSS文件“/static/my.css”改善外观，如半透明背景和图片尺寸调整。

JavaScript
“/static/my.js”整合音频控制、图片轮播、计时器及在线问答系统，全面展示了JavaScript在DOM操作、事件监听、时间控制和数据处理上的能力。

后端
服务器应用采用Express、Socket.IO和Node.js创建实时交互的Web服务，用于测验游戏的排行榜实时更新。

Express负责路由处理；
HTTP服务实例供Socket.IO挂载；
Socket.IO实现客户端与服务器双向实时通信；
Body-Parser处理POST请求的请求体；
FS模块提供静态文件服务。
路由
设置三个GET请求分别发送三个静态HTML文件，一个POST请求用于存储成绩到“/static/leaderboard.txt”。

Socket.IO
服务器端创建io对象，客户端访问排行榜页面时建立连接。当客户端连接且排行榜更新时，服务器发出“leaderboard”事件并传递数据给所有客户端，客户端监控此事件并据此更新界面。

挑战与解决方案
设计：借助专业模板确保跨设备良好布局。
素材：从免费资源站（https://iconarchive.com/）获取图片和图标。
背景图：调整CSS使图片半透明且随页面滚动。
背景音乐：因浏览器策略限制自动播放，改用图标控制。
计时器：通过前端JavaScript管理答题时间。
实时通信：通过学习官方文档和求助成功配置Socket.IO。
